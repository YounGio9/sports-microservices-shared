// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(uuid())
  firstName    String
  lastName     String
  email        String   @unique
  password     String
  picture      String?
  role         Role     @default(PLAYER)
  clubId       String?
  club         Club?    @relation(fields: [clubId], references: [id])
  createdAt    DateTime @default(now())
  refreshToken String?  @unique
  ownedClub    Club?    @relation("OwnedClub")
  team         Team?    @relation(fields: [teamId], references: [id])
  teamId       String?
}

enum Role {
  PLAYER
  COACH
  ADMIN
}

model Club {
  id           String   @id @default(cuid())
  name         String
  sportId      String
  sport        Sport    @relation(fields: [sportId], references: [id])
  teamCapacity Int
  teamAgeRange String
  picture      String?
  createdAt    DateTime @default(now())
  owner        User     @relation("OwnedClub", fields: [ownerId], references: [id])
  members      User[]
  ownerId      String   @unique
  events       Event[]
  teams        Team[]
}

model Sport {
  id                String   @id @default(uuid())
  name              String   @unique
  minPlayersPerGame Int
  createdAt         DateTime @default(now())
  clubs             Club[]
}

model Event {
  id            String          @id @default(uuid())
  club          Club            @relation(fields: [clubId], references: [id])
  clubId        String
  name          String
  date          String
  place         String
  startTime     String
  endTime       String
  uniform       String
  description   String
  coachNotes    String
  createdAt     DateTime        @default(now())
  eventType     EventType       @relation(fields: [eventTypeName], references: [name])
  eventTypeName String
  properties    EventProperty[]
}

model EventProperty {
  id       String  @id @default(uuid())
  name     String
  value    String
  required Boolean @default(true)
  event    Event   @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId  String
}

model EventType {
  id         String               @id @default(uuid())
  name       String               @unique
  image      String
  events     Event[]
  attributes EventTypeAttribute[]
  createdAt  DateTime             @default(now())
}

model EventTypeAttribute {
  id            String    @id @default(uuid())
  name          String
  eventType     EventType @relation(fields: [eventTypeName], references: [name], onDelete: Cascade)
  eventTypeName String
}

model Team {
  id      String @id @default(uuid())
  name    String
  players User[]
  club    Club   @relation(fields: [clubId], references: [id], onDelete: Cascade)
  clubId  String
}
